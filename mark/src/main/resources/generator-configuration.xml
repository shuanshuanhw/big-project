<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>

<!--    用于指定全局配置文件-->
<!--    <properties resource="db.properties"/>-->

<!--    用于指定数据源驱动包（jar或者zip）的绝对路径-->
    <classPathEntry location="C:\mysql-connector-java-8.0.27.jar" />

<!--    用于运行时的解析模式和具体的代码生成行为-->
    <context id="mysqlTables" targetRuntime="MyBatis3Simple">
<!--        id：Context示例的唯一ID，用于输出错误信息时候作为唯一标记。-->
<!--        targetRuntime：用于执行代码生成模式。-->


        <!--        用于引入一些插件对代码生成的一些特性进行扩展-->
        <!--        引入org.mybatis.generator.plugins.SerializablePlugin插件会让生成的实体类自动实现java.io.Serializable接口并且添加serialVersionUID属性。-->
        <plugin type="org.mybatis.generator.plugins.SerializablePlugin"/>

        <!--        标签是可选的，用于控制生成的实体的注释内容。-->
        <commentGenerator>
            <property name="suppressDate" value="true"/>
            <property name="suppressAllComments" value="true"/>
        </commentGenerator>


<!--        <jdbcConnection>标签用于指定数据源的连接信息-->
        <jdbcConnection driverClass="com.mysql.cj.jdbc.Driver"
                        connectionURL="jdbc:mysql://localhost:3306/agv?serverTimezone=UTC"
                        userId="root"
                        password="651392qQ">

            <property name="nullCatalogMeansCurrent" value="true"/>


        </jdbcConnection>



<!--        用于解析和计算数据库列类型和Java类型的映射关系-->
        <javaTypeResolver>
<!--        是否强制把所有的数字类型强制使用java.math.BigDecimal类型表示-->
            <property name="forceBigDecimals" value="false" />
        </javaTypeResolver>

<!--        主要用于控制实体（Model）类的代码生成行为-->
<!--        targetProject: 生成的实体类文件相对于项目（根目录）的位置-->
<!--        targetPackage: 生成的实体类的包名-->
        <javaModelGenerator targetPackage="lib.sdlib.jsb.mark.entity" targetProject="C:\test-jdbc\src">
            <property name="enableSubPackages" value="true" />
            <property name="trimStrings" value="true" />
        </javaModelGenerator>

<!--        用于控制XML映射文件的代码生成行为-->
<!--        targetPackage: 生成的XML映射文件的包名-->
        <sqlMapGenerator targetPackage="lib.sdlib.jsb.mark.mapper"  targetProject="C:\test-jdbc\src">
            <property name="enableSubPackages" value="true" />
        </sqlMapGenerator>

<!--        主要用于控制Mapper接口的代码生成行为-->
<!--        type: Mapper接口生成策略 <context>标签的targetRuntime属性为MyBatis3DynamicSql或者MyBatis3Kotlin时此属性配置忽略-->
        <javaClientGenerator type="ANNOTATEDMAPPER" targetPackage="lib.sdlib.jsb.mark.dao"  targetProject="C:\test-jdbc\src">
            <property name="enableSubPackages" value="true" />
        </javaClientGenerator>

<!--        主要用于配置要生成代码的数据库表格-->
        <table tableName="dept">
<!--            useActualColumnNames: 是否使用列名作为实体类的属性名-->
            <property name="useActualColumnNames" value="true"/>
            <!-- column：指定主键列 -->
            <!-- sqlStatement：查询主键的SQL语句，例如填写了MySql，则使用SELECT LAST_INSERT_ID() -->
            <!-- type：可选值为pre或者post，pre指定selectKey标签的order为BEFORE，post指定selectKey标签的order为AFTER -->
            <!-- identity：true的时候，指定selectKey标签的order为AFTER -->
            <generatedKey column="id" sqlStatement="MySql" identity="true" />
            <!-- column：指定要覆盖配置的列 -->
            <!-- property：指定要覆盖配置的属性 -->
            <!-- delimitedColumnName：是否为列名添加定界符，例如`{column}` -->
            <!-- isGeneratedAlways：是否一定生成此列 -->
<!--            <columnOverride column="DATE_FIELD" property="startDate" />-->
<!--            0或N个<ignoreColumn>用于指定忽略生成的列-->
<!--            <ignoreColumn column="FRED" />-->

<!--            <columnOverride column="LONG_VARCHAR_FIELD" jdbcType="VARCHAR" />-->
        </table>

    </context>
</generatorConfiguration>